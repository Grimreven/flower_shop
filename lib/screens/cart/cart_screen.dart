import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/cart_controller.dart';
import '../../utils/app_colors.dart';

class CartScreen extends StatelessWidget {
  const CartScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final CartController cartController = Get.find<CartController>();

    // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω—è—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î)
    String paymentMethod = 'card';
    String address = '—É–ª. –¶–≤–µ—Ç–æ—á–Ω–∞—è, –¥. 5';
    double availableBonuses = 120;
    double usedBonuses = 0;
    TextEditingController promoController = TextEditingController();

    return Scaffold(
      appBar: AppBar(
        title: const Text('–ö–æ—Ä–∑–∏–Ω–∞'),
        backgroundColor: AppColors.primary,
      ),
      body: Obx(() {
        if (cartController.items.isEmpty) {
          return const Center(
            child: Text('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üòï', style: TextStyle(fontSize: 18)),
          );
        }

        return SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              // –¢–æ–≤–∞—Ä—ã
              ...cartController.items.map((item) {
                return Card(
                  margin: const EdgeInsets.symmetric(vertical: 8),
                  child: ListTile(
                    leading: Image.network(item.product.imageUrl,
                        width: 50, height: 50, fit: BoxFit.cover),
                    title: Text(item.product.name),
                    subtitle: Text('${item.product.price.toStringAsFixed(0)} ‚ÇΩ'),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: const Icon(Icons.remove_circle_outline),
                          onPressed: () => cartController.decrement(item.product),
                        ),
                        Text('${item.quantity}',
                            style: const TextStyle(fontWeight: FontWeight.bold)),
                        IconButton(
                          icon: const Icon(Icons.add_circle_outline),
                          onPressed: () => cartController.increment(item.product),
                        ),
                      ],
                    ),
                  ),
                );
              }),

              const SizedBox(height: 24),

              // -------- –ê–¥—Ä–µ—Å --------
              ListTile(
                title: const Text('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'),
                subtitle: Text(address),
                trailing: IconButton(
                  icon: const Icon(Icons.edit_location_alt_outlined),
                  onPressed: () {
                    // TODO: –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                  },
                ),
              ),
              const Divider(),

              // -------- –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã --------
              const SizedBox(height: 8),
              const Text('–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
              RadioListTile(
                title: const Text('–ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'),
                value: 'card',
                groupValue: paymentMethod,
                onChanged: (_) {},
              ),
              RadioListTile(
                title: const Text('–ù–∞–ª–∏—á–Ω—ã–º–∏'),
                value: 'cash',
                groupValue: paymentMethod,
                onChanged: (_) {},
              ),
              const Divider(),

              // -------- –ë–æ–Ω—É—Å—ã --------
              const SizedBox(height: 8),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã',
                      style: TextStyle(fontWeight: FontWeight.bold)),
                  Text('${usedBonuses.toStringAsFixed(0)} –∏–∑ $availableBonuses'),
                ],
              ),
              Slider(
                min: 0,
                max: availableBonuses,
                divisions: availableBonuses.toInt(),
                value: usedBonuses,
                onChanged: (v) {
                  usedBonuses = v;
                },
              ),
              const Divider(),

              // -------- –ü—Ä–æ–º–æ–∫–æ–¥ --------
              const SizedBox(height: 8),
              TextField(
                controller: promoController,
                decoration: InputDecoration(
                  labelText: '–ü—Ä–æ–º–æ–∫–æ–¥',
                  suffixIcon: IconButton(
                    icon: const Icon(Icons.check_circle_outline),
                    onPressed: () {
                      // TODO: –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
                    },
                  ),
                ),
              ),
              const Divider(),

              // -------- –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ --------
              ListTile(
                title: const Text('–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏'),
                trailing: const Icon(Icons.access_time),
                onTap: () async {
                  final time = await showTimePicker(
                    context: context,
                    initialTime: TimeOfDay.now(),
                  );
                  if (time != null) {
                    Get.snackbar(
                      '–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ',
                      '–î–æ—Å—Ç–∞–≤–∫–∞ –∫ ${time.format(context)}',
                      snackPosition: SnackPosition.BOTTOM,
                    );
                  }
                },
              ),
              const Divider(),

              // -------- –ò—Ç–æ–≥ --------
              const SizedBox(height: 12),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text('–ò—Ç–æ–≥–æ:',
                      style:
                      TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  Text(
                    '${cartController.totalPrice.toStringAsFixed(0)} ‚ÇΩ',
                    style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: AppColors.primary),
                  ),
                ],
              ),
              const SizedBox(height: 16),

              ElevatedButton(
                onPressed: () {
                  // TODO: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ backend
                  Get.snackbar(
                    '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!',
                    '–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üòä',
                    snackPosition: SnackPosition.BOTTOM,
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppColors.primary,
                  minimumSize: const Size(double.infinity, 48),
                ),
                child: const Text('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'),
              ),
            ],
          ),
        );
      }),
    );
  }
}
